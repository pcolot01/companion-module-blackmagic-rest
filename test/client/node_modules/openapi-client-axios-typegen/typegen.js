"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOperationMethodTypings = exports.generateTypesForDocument = exports.main = void 0;
var lodash_1 = __importDefault(require("lodash"));
var yargs_1 = __importDefault(require("yargs"));
var indent_string_1 = __importDefault(require("indent-string"));
var openapi_client_axios_1 = __importStar(require("openapi-client-axios"));
var dtsGenerator_1 = __importDefault(require("@anttiviljami/dtsgenerator/dist/core/dtsGenerator"));
var dtsgenerator_1 = require("@anttiviljami/dtsgenerator");
var json_schema_ref_parser_1 = __importDefault(require("@apidevtools/json-schema-ref-parser"));
// rule from 'dts-generator' jsonSchema.ts
function convertKeyToTypeName(key) {
    key = key.replace(/\/(.)/g, function (_match, p1) {
        return p1.toUpperCase();
    });
    return key
        .replace(/}/g, '')
        .replace(/{/g, '$')
        .replace(/^\//, '')
        .replace(/[^0-9A-Za-z_$]+/g, '_');
}
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var argv, opts, _a, modulePath, func, module_1, _b, imports, schemaTypes, operationTypings;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, yargs_1.default
                        .option('transformOperationName', {
                        alias: 't',
                        type: 'string',
                    })
                        .usage('Usage: $0 [file]')
                        .example('$0 ./openapi.yml > openapi.d.ts', '')
                        .example('$0 https://openapistack.co/petstore.openapi.json > openapi.d.ts', '')
                        .demandCommand(1).argv];
                case 1:
                    argv = _c.sent();
                    opts = {
                        transformOperationName: function (operation) { return operation; },
                    };
                    if (!argv.transformOperationName) return [3 /*break*/, 3];
                    _a = argv.transformOperationName.split(/\.(?=[^\.]+$)/), modulePath = _a[0], func = _a[1];
                    if (!modulePath || !func) {
                        throw new Error('transformOperationName must be provided in {path-to-module}.{exported-function} format');
                    }
                    return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require(modulePath)); })];
                case 2:
                    module_1 = _c.sent();
                    if (!module_1[func]) {
                        throw new Error("Could not find transform function ".concat(func, " in ").concat(modulePath));
                    }
                    opts.transformOperationName = module_1[func];
                    _c.label = 3;
                case 3: return [4 /*yield*/, generateTypesForDocument(argv._[0], opts)];
                case 4:
                    _b = _c.sent(), imports = _b[0], schemaTypes = _b[1], operationTypings = _b[2];
                    console.log(imports, '\n');
                    console.log(schemaTypes);
                    console.log(operationTypings);
                    return [2 /*return*/];
            }
        });
    });
}
exports.main = main;
var schemaParserOptions = { resolve: { http: { headers: { 'User-Agent': 'Typegen' } } } };
function generateTypesForDocument(definition, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var rootSchema, normalizedSchema, schema, generator, schemaTypes, exportedTypes, api, operationTypings, imports;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, json_schema_ref_parser_1.default.bundle(definition, schemaParserOptions)];
                case 1:
                    rootSchema = _a.sent();
                    normalizedSchema = normalizeSchema(rootSchema);
                    schema = (0, dtsgenerator_1.parseSchema)(normalizedSchema);
                    generator = new dtsGenerator_1.default([schema]);
                    return [4 /*yield*/, generator.generate()];
                case 2:
                    schemaTypes = _a.sent();
                    exportedTypes = generator.getExports();
                    api = new openapi_client_axios_1.default({ definition: normalizedSchema });
                    return [4 /*yield*/, api.init()];
                case 3:
                    _a.sent();
                    operationTypings = generateOperationMethodTypings(api, exportedTypes, opts);
                    imports = [
                        'import type {',
                        '  OpenAPIClient,',
                        '  Parameters,',
                        '  UnknownParamsObject,',
                        '  OperationResponse,',
                        '  AxiosRequestConfig,',
                        "} from 'openapi-client-axios';",
                    ].join('\n');
                    return [2 /*return*/, [imports, schemaTypes, operationTypings]];
            }
        });
    });
}
exports.generateTypesForDocument = generateTypesForDocument;
function generateMethodForOperation(methodName, operation, exportTypes) {
    var operationId = operation.operationId, summary = operation.summary, description = operation.description;
    if (operationId === 'createEntity') {
        debugger;
    }
    // parameters arg
    var normalizedOperationId = convertKeyToTypeName(operationId);
    var normalizedPath = convertKeyToTypeName(operation.path);
    var parameterTypePaths = lodash_1.default.chain([
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedOperationId, "/pathParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedPath, "/pathParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedOperationId, "/queryParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedPath, "/queryParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedOperationId, "/headerParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedPath, "/headerParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedOperationId, "/cookieParameters") }),
        lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedPath, "/cookieParameters") }),
    ])
        .filter()
        .map('path')
        .value();
    var parametersType = !lodash_1.default.isEmpty(parameterTypePaths) ? parameterTypePaths.join(' & ') : 'UnknownParamsObject';
    var parametersArg = "parameters?: Parameters<".concat(parametersType, "> | null");
    // payload arg
    var requestBodyType = lodash_1.default.find(exportTypes, { schemaRef: "#/paths/".concat(normalizedOperationId, "/requestBody") });
    var dataArg = "data?: ".concat(requestBodyType ? requestBodyType.path : 'any');
    // return type
    var responseTypePaths = lodash_1.default.chain(exportTypes)
        .filter(function (_a) {
        var schemaRef = _a.schemaRef;
        return schemaRef.startsWith("#/paths/".concat(normalizedOperationId, "/responses/2"));
    })
        .map(function (_a) {
        var path = _a.path;
        return path;
    })
        .value();
    var responseType = !lodash_1.default.isEmpty(responseTypePaths) ? responseTypePaths.join(' | ') : 'any';
    var returnType = "OperationResponse<".concat(responseType, ">");
    var operationArgs = [parametersArg, dataArg, 'config?: AxiosRequestConfig'];
    var operationMethod = "'".concat(methodName, "'(\n").concat(operationArgs
        .map(function (arg) { return (0, indent_string_1.default)(arg, 2); })
        .join(',\n'), "  \n): ").concat(returnType);
    // comment for type
    var content = lodash_1.default.filter([summary, description]).join('\n\n');
    var comment = '/**\n' +
        (0, indent_string_1.default)(content === '' ? operationId : "".concat(operationId, " - ").concat(content), 1, {
            indent: ' * ',
            includeEmptyLines: true,
        }) +
        '\n */';
    return [comment, operationMethod].join('\n');
}
function generateOperationMethodTypings(api, exportTypes, opts) {
    var operations = api.getOperations();
    var operationTypings = operations
        .map(function (op) {
        return op.operationId
            ? generateMethodForOperation(opts.transformOperationName(op.operationId), op, exportTypes)
            : null;
    })
        .filter(function (op) { return Boolean(op); });
    var pathOperationTypes = lodash_1.default.entries(api.definition.paths).map(function (_a) {
        var path = _a[0], pathItem = _a[1];
        var methodTypings = [];
        for (var m in pathItem) {
            if (pathItem[m] && lodash_1.default.includes(Object.values(openapi_client_axios_1.HttpMethod), m)) {
                var method = m;
                var operation = lodash_1.default.find(operations, { path: path, method: method });
                if (operation.operationId) {
                    var methodForOperation = generateMethodForOperation(method, operation, exportTypes);
                    methodTypings.push(methodForOperation);
                }
            }
        }
        return __spreadArray(__spreadArray(["['".concat(path, "']: {")], methodTypings.map(function (m) { return (0, indent_string_1.default)(m, 2); }), true), ['}'], false).join('\n');
    });
    return __spreadArray(__spreadArray(__spreadArray(__spreadArray([
        'export interface OperationMethods {'
    ], operationTypings.map(function (op) { return (0, indent_string_1.default)(op, 2); }), true), [
        '}',
        '',
        'export interface PathsDictionary {'
    ], false), pathOperationTypes.map(function (p) { return (0, indent_string_1.default)(p, 2); }), true), [
        '}',
        '',
        'export type Client = OpenAPIClient<OperationMethods, PathsDictionary>',
    ], false).join('\n');
}
exports.generateOperationMethodTypings = generateOperationMethodTypings;
var normalizeSchema = function (schema) {
    var _a;
    var clonedSchema = lodash_1.default.cloneDeep(schema);
    // dtsgenerator doesn't generate parameters correctly if they are $refs to Parameter Objects
    // so we resolve them here
    for (var path in (_a = clonedSchema.paths) !== null && _a !== void 0 ? _a : {}) {
        var pathItem = clonedSchema.paths[path];
        for (var method in pathItem) {
            var operation = pathItem[method];
            if (operation.parameters) {
                operation.parameters = operation.parameters.map(function (parameter) {
                    if ('$ref' in parameter) {
                        var refPath = parameter.$ref.replace('#/', '').replace(/\//g, '.');
                        var resolvedParameter = lodash_1.default.get(clonedSchema, refPath);
                        return resolvedParameter !== null && resolvedParameter !== void 0 ? resolvedParameter : parameter;
                    }
                    return parameter;
                });
            }
        }
    }
    // make sure schema is plain JSON with no metadata
    return JSON.parse(JSON.stringify(clonedSchema));
};
if (require.main === module) {
    main();
}
//# sourceMappingURL=typegen.js.map