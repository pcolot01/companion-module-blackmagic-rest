# OpenAPI version identifier - required for OpenAPI 3.1 domains
openapi: 3.1.0

#######################
# Optional info section
#######################
info:
  title: REST API for Blackmagic camera
  description: Blackmagic camera REST API
  version: 0.1.0

servers:
  - description: Local Mocking
    url: https://localhost:9000
  - description: Camera1 to be declare in DNS or Hosts file
    url: https://camera1/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  - description: Camera2 to be declare in DNS or Hosts file
    url: https://camera2/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  - description: Camera3 to be declare in DNS or Hosts file
    url: https://camera3/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  - description: Camera4 to be declare in DNS or Hosts file
    url: https://camera4/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  - description: Camera5 to be declare in DNS or Hosts file
    url: https://camera5/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  - description: Camera6 to be declare in DNS or Hosts file
    url: https://camera6/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/PIERRECOLOT_1/Blackmagic_Camera_API/0.1.0

components:
  schemas:
    GetTransportMode:
      type: object
      properties:
        mode:
          type: string
          description: Transport mode Response.
          enum:
          - InputPreview
          - InputRecord
          - Output
    TransportMode:
      type: object
      properties:
        mode:
          type: string
          description: Transport mode Request.
          enum:
          - InputPreview
          - Output
    Stop:
      type: boolean
      description: True when transport mode is InputPreview or when in Output mode and speed is 0
    Play:
      type: boolean
      description: True when transport is in Output mode and speed is non-zero
    Playback:
      type: object
      properties:
        type:
          type: string
          enum:
          - Play
          - Jog
          - Shuttle
          - Var
        loop:
          type: boolean
          description: When true playback loops from the end of the timeline to the beginning of the timeline
        singleClip:
          type: boolean
          description: When true playback loops from the end of the current clip to the beginning of the current clip
        speed:
          type: number
          description: "Playback Speed, 1.0 for normal forward playback"
        position:
          type: integer
          description: Playback position on the timeline in units of video frames
    GetRecord:
      type: object
      properties:
        recording:
          type: boolean
          description: Is transport in Input Record mode
    Record:
      type: object
      properties:
        recording:
          type: boolean
          description: Is transport in Input Record mode
        clipName:
          type: string
          description: "Used to set the requested clipName to record to, when specifying \"recording\" attribute to True"
    Timecode:
      type: object
      properties:
        timecode:
          type: number
          description: The time of day timecode in units of binary-coded decimal (BCD).
        clip:
          type: number
          description: The position of the clip timecode in units of binary-coded decimal (BCD).
    TimecodeSource:
      type: object
      properties:
        timecode:
          type: string
          enum:
          - Timecode
          - Clip
    GetIris:
      type: object
      properties:
        continuousApertureAutoExposure:
          type: boolean
          description: Is Aperture controlled by auto exposure
        apertureStop:
          type: number
          description: Aperture stop value
        normalised:
          type: number
          description: Normalised value
        apertureNumber:
          type: number
          description: Aperture number
    Iris:
      type: object
      properties:
        apertureStop:
          type: number
          description: Aperture stop value
        normalised:
          type: number
          description: Normalised value
        apertureNumber:
          type: number
          description: Aperture number
    Zoom:
      type: object
      properties:
        focalLength:
          type: integer
          description: Focal length in mm
        normalised:
          type: number
          description: Normalised value
    Focus:
      type: object
      properties:
        focus:
          type: number
          description: Normalised value
  
  ####################
  # Common parameters
  ####################
  parameters: {}

  #######################
  # Common request bodies
  #######################
  requestBodies: {}
  
  ####################
  # Common responses
  ####################
  responses: {}

  #########################
  # Common headers
  # (except request headers - they are defined as parameters)
  #########################
  headers: {}

  #######################
  # Common path items
  #######################
  pathitems:
    ###########
    # transport
    ###########
    transports.0:
      get:
        operationId: getTransports0
        summary: Get device's basic transport status.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetTransportMode'
      put:
        operationId: putTransports0
        summary: Set device's basic transport status.
        requestBody:
            description: Set the transport mode
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TransportMode'
        responses:
          204:
            description: No Content
    transports.0.stop:
      get:
        operationId: getTransports0Stop
        summary: Determine if transport is stopped.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Stop'
      put:
        operationId: putTransports0Stop
        summary: Stop transport.
        responses:
          204:
            description: No Content
    transports.0.play:
      get:
        operationId: getTransports0Play
        summary: Determine if transport is playing.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Play'
      put:
        operationId: putTransports0Play
        summary: Start playing on transport.
        responses:
          204:
            description: No Content
    transports.0.playback:
      get:
        operationId: getTransports0Playback
        summary: Get playback state.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Playback'
      put:
        operationId: putTransports0Playback
        summary: Set playback state.
        requestBody:
          description: Update playback state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playback'
        responses:
          204:
            description: No Content
    transports.0.record:
      get:
        operationId: getTransports0Record
        summary: Get record state.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetRecord'
      put:
        operationId: putTransports0Record
        summary: Set record state.
        requestBody:
          description: Update record state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
        responses:
          204:
            description: No Content
    transports.0.timecode:
      get:
        operationId: getTransports0Timecode
        summary: Get device's timecode.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Timecode'
    transports.0.timecode.source:
      get:
        operationId: getTransports0TimecodeSource
        summary: Get timecode source selected on device
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/TimecodeSource'
    
    ######
    # Lens
    ######

    lens.iris:
      get:
        operationId: getLensIris
        summary: Get lens’ aperture.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/GetIris'
      put:
        operationId: putLensIris   
        summary: Set lens’ aperture.
        requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Iris'
        responses:
          200:
            description: OK
    lens.zoom:
      get:
        operationId: getLensZoom
        summary: Get lens’ zoom.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Zoom'
      put:
        operationId: putLensZoom 
        summary: Set lens’ aperture.
        requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Zoom'
        responses:
          200:
            description: OK
    lens.focus:
      get:
        operationId: getLensFocus
        summary: Get lens’ focus.
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Focus'
      put:
        operationId: putLensFocus
        summary: Set lens’ focus.
        requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Focus'
        responses:
          200:
            description: OK
    lens.focus.doAutoFocus:
      put:
        operationId: putLensDoAutoFocus
        summary: Perform auto focus.
        responses:
          200:
            description: OK

paths:
  ###########
  # transport
  ###########
  /transports/0:
    $ref: '#/components/pathitems/transports.0'
  /transports/0/stop:
    $ref: '#/components/pathitems/transports.0.stop'
  /transports/0/play:
    $ref: '#/components/pathitems/transports.0.play'
  /transports/0/playback:
    $ref: '#/components/pathitems/transports.0.playback'
  /transports/0/record:
    $ref: '#/components/pathitems/transports.0.record'
  /transports/0/timecode:
    $ref: '#/components/pathitems/transports.0.timecode'
  /transports/0/timecode/source:
    $ref: '#/components/pathitems/transports.0.timecode.source'

  ######
  # Lens
  ######
  /lens/iris:
    $ref: '#/components/pathitems/lens.iris'
  /lens/zoom:
    $ref: '#/components/pathitems/lens.zoom'
  /lens/focus:
    $ref: '#/components/pathitems/lens.focus'
  /lens/focus/doAutoFocus:
    $ref: '#/components/pathitems/lens.focus.doAutoFocus'

